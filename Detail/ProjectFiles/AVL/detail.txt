Step 1: Inspect the BSTNode.py and BinarySearchTree.py files

Inspect the BSTNode class declaration for a binary search tree node in BSTNode.py. Access BSTNode.py by clicking on the orange arrow next to main.py at the top of the coding window. The BSTNode class has attributes for the key, reference to the parent, reference to the left child, and reference to the right child. Accessor methods exist for each.
Inspect the BinarySearch Tree class declaration for a binary search tree node in BinarySearchTree.py. The get_nth_key() method is the only abstract method that exists.


Step 2: Inspect other files related to the inheritance hierarchy

Classes AVLNode and AVLTree inherit from BSTNode and Binary Search Tree, respectively. Each class is implemented in a read only file.
Classes ExtendedAVLNode and ExtendedAVLTree are declared, but implementations are incomplete. Both classes must be implemented in this lab.


Step 3: Understand the purpose of the subtree_key_count variable

The ExtendedAVLNode class inherits from AVLNode and adds one integer attribute, subtree_key_count. Each node's subtree key count is the number of keys in the subtree rooted at that node.
ExtendedAVLNode's constructor and get_subtree_key_count() methods are already implemented and should not be changed. Additional methods are needed to ensure that subtree_key_count remains accurate.


Step 4: Implement ExtendedAVLTree and ExtendedAVLNode

Each node in an ExtendedAVLTree must have a correct subtree_key_count after an insertion or removal operation. Determine which methods in AVLTree and AVLNode must be overridden in ExtendedAVLTree and ExtendedAVLNode to keep each node's subtree_key_count correct. New methods can be added along with overridden methods, if desired.
Hint: Consider an update_subtree_key_count() method for the ExtendedAVLNode class. The method requires each child node's subtree_key_count to be correct, and updates the node's subtree_key_count appropriately. Overridden methods in both ExtendedAVLNode and ExtendedAVLTree can call a node's update_subtree_key_count() method as needed.
Once determinations are made, complete the implementation of both the ExtendedAVLTree and ExtendedAVLNode classes. Do not implement ExtendedAVLTree's get_nth_key() in this step. get_nth_key() requires correct subtree counts at each node.

﻿
Step 5: Run tests in develop mode and submit mode

TreeTestCommand is an abstract base class defined in TreeCommands.py. A Tree TestCommand object is an executable command that operates on a binary search tree. Classes inheriting from TreeTestCommand are also declared in TreeCommands.py:

• TreeInsertCommand inserts keys into the tree
• TreeRemoveCommand removes keys from the tree
• TreeVerifyKeysCommand verifies the tree's keys using an inorder traversal
• TreeVerifySubtreeCountsCommand verifies that each node in the tree has the expected subtree key count
• TreeGetNthCommand verifies that get_nth_key() returns an expected value

Code in main.py contains three automated test cases. Each test executes a list of TreeTestCommand objects in sequence. The third test includes TreeGetNthCommands and will not pass until the completion of Step 6. The first two tests should pass after completion of step 4.
Before proceeding to Step 6, run code in develop mode and ensure that the first two tests in main.py pass. Then submit code and ensure that the first two unit tests pass.


Step 6: Implement ExtendedAVLTree's get_nth_key() method (worst case O(log n))

get_nth_key() must return the tree's nth-largest key. The parameter n starts at 0 for the smallest key in the tree. Ex: Suppose a tree has keys: 10, 19, 20, 30, 42, 55, 77
Then get_nth_key (0) returns 10, get_nth_key (1) returns 19, ... get_nth_key (5) returns 55, and get_nth_key (6) returns 77.
Determine an algorithm that uses the subtree key counts so that get_nth_key() operates in worst case O(log n) time.